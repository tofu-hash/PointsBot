import aiogram.utils.exceptions

from handlers.init import *


async def delete_last_messages(msg: Message, count: int = 3):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –∫–æ–º–∞–Ω–¥—ã."""

    for i in range(0, count):
        await bot.delete_message(chat_id=msg.from_user.id,
                                 message_id=msg.message_id - i)


async def start_cmd_handler(msg: Message, state: FSMContext):
    await state.finish()

    # Create user
    execute(
        ('INSERT OR IGNORE INTO users '
         '(user_id, username, created) '
         'VALUES (%s, "%s", %s);') %
        (msg.from_user.id, msg.from_user.username,
         now_unix_time())
    )

    answer = ('–ü—Ä–∏–≤–µ—Ç, *%s*!üëã\n\n'
              '–Ø - –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á '
              '–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–∫–æ–≤ (*–ø–æ–∏–Ω—Ç–æ–≤*) –∑–∞ –Ω–∏—Ö.\n\n'
              'ü§î –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?\n'
              '–í—Å—ë –ø—Ä–æ—Å—Ç–æ - –∂–∏—Ç—å –ø—Ä–æ—â–µ, '
              '—Ä–∞–∑–±–∏–≤–∞—è –∑–∞–¥–∞—á–∏ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ.\n\n'
              'üéØ –ï—Å—Ç—å –¥–≤–∞ —Ç–∏–ø–∞ –ø–æ–∏–Ω—Ç–æ–≤:\n'
              '*‚Ä¢ –û–±—â–∏–µ* - —ç—Ç–æ –ø–æ–∏–Ω—Ç—ã –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n'
              '*‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ* - —ç—Ç–æ –ø–æ–∏–Ω—Ç—ã, –æ–±–Ω—É–ª—è–µ–º—ã–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n'
              'üöë */help* - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥') % msg.from_user.first_name

    await msg.answer_sticker(sticker='CAACAgIAAxkBAAMKZCqF8NxyEdlQYjNX0uQ-kMCKBRsAAvINAAK7fWBIH8H7_ft7nyovBA')
    await msg.answer(text=answer, parse_mode='markdown')


async def help_cmd_handler(msg: Message, state: FSMContext):
    await state.finish()

    answer = ('üöë –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞.\n\n'
              '*/task* - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –í—ã '
              '–º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ç–µ–∫—Å—Ç—É, '
              '–∏ –æ–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –∫ –∑–∞–¥–∞—á–µ. –¢–∞–∫–∂–µ, '
              '–≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ '
              '–≤ —á–∞—Ç.\n\n'
              '*/tasks* - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n\n'
              '*/lasttask* - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é '
              '–∑–∞–¥–∞—á—É.\n\n'
              '*/stats* - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏–Ω—Ç–æ–≤.')
    await msg.answer_sticker(sticker='CAACAgIAAxkBAAMaZCqHb_yZ420qmb6L4K7b-dCpWYAAAicjAAIyIHlKbAUWKHL95xwvBA')
    await msg.answer(answer, parse_mode='markdown')


def make_complete_task_reply_markup(user_id: int):
    last_task_id = execute(
        ('SELECT id FROM tasks '
         'WHERE user_id=%s AND completed=0 ORDER BY id DESC LIMIT 1;') % user_id,
        fetchone=True
    )[0]

    reply_markup = InlineKeyboardMarkup()
    reply_markup.add(InlineKeyboardButton(text='‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª',
                                          callback_data='complete_task_%s' % last_task_id))
    reply_markup.add(InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å',
                                          callback_data='delete_task_%s' % last_task_id))
    return reply_markup


async def create_task_cmd_handler(msg: Message, state: FSMContext):
    await TasksStatesGroup.set_task_description.set()

    answer = ('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ '
              '(–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤) üßê')
    await msg.answer_sticker(sticker='CAACAgIAAxkBAAPYZCqR6zZzKVUz33Sf5pgBrblebycAAmcgAAKapIFK0HYDHhsRZbQvBA')
    await msg.answer(text=answer, reply_markup=cancel_reply_markup)


async def set_task_description_handler(msg: Message, state: FSMContext):
    msg_text = msg.text if msg.text else msg.caption
    if len(msg_text) <= 100:
        photo_id = '"%s"' % msg.photo[-1].file_id if msg.photo else 'NULL'
        execute(
            ('INSERT INTO tasks '
             '(user_id, description, created, photo_id) '
             'VALUES (%s, "%s", %s, %s);') %
            (msg.from_user.id, msg.html_text.replace("'", '"'),
             now_unix_time(), photo_id)
        )

        answer = ('ü•≥ <b>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>\n\n'
                  'üí¨ –í–æ—Ç –µ—ë —Ç–µ–∫—Å—Ç: <b>%s</b>\n\n') % msg.html_text.replace("'", '"')

        await msg.answer_sticker(sticker='CAACAgIAAxkBAAMZZCqHXXVGPzg4eHzg__GbcJ8OkzYAAvwdAAJ9b4BKNkCjrR9OPS4vBA')
        if msg.photo:
            await msg.answer_photo(photo=msg.photo[-1].file_id,
                                   caption=answer, parse_mode='HTML',
                                   reply_markup=make_complete_task_reply_markup(msg.from_user.id))
        else:
            await msg.answer(text=answer, parse_mode='HTML',
                             reply_markup=make_complete_task_reply_markup(msg.from_user.id))
        await state.finish()
    else:
        answer = ('‚ö† –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.\n'
                  '–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –µ–≥–æ, –∏–ª–∏ '
                  '—Ä–∞–∑–±–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –∑–∞–¥–∞—á–∏.')
        await msg.answer_sticker(sticker='CAACAgIAAxkBAAMZZCqHXXVGPzg4eHzg__GbcJ8OkzYAAvwdAAJ9b4BKNkCjrR9OPS4vBA')
        await msg.answer(text=answer)

    await delete_last_messages(msg)


async def stats_cmd_handler(msg: Message):
    today_points = execute(
        ('SELECT COUNT(*) FROM tasks '
         'WHERE created>=%s AND user_id=%s AND completed=1') %
        (int(now_unix_time() - (24 * 60 * 60)),
         msg.from_user.id),
        fetchone=True, commit=False
    )[0]

    all_points = execute(
        ('SELECT COUNT(*) FROM tasks '
         'WHERE user_id=%s AND completed=1') % msg.from_user.id,
        fetchone=True
    )[0]

    answer = ('üìä –í–æ—Ç —Ç–≤–æ–∏ –ø–æ–∏–Ω—Ç—ã:\n\n'
              'üéØ –û–±—â–∏–µ: *%s*\n'
              'üéØ –ó–∞ –ø–æ—Å–ª. 24—á: *%s*\n\n') % (all_points, today_points)
    await msg.answer_sticker(sticker='CAACAgIAAxkBAANjZCqMNIQ8xtCzPTUtGVYfb9Qu9dcAAkUgAAKkVHlKVlptX9K1_6svBA')
    await msg.answer(text=answer, parse_mode='markdown')
    await delete_last_messages(msg)


async def last_task_cmd_handler(msg: Message):
    task_description, task_photo_id = execute(
        ('SELECT description, photo_id FROM tasks '
         'WHERE user_id=%s AND completed=0 ORDER BY id DESC LIMIT 1;') % msg.from_user.id,
        fetchone=True, commit=False
    )
    if task_description:
        answer = ('üéØ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞\n\n'
                  'üí¨ %s') % task_description

        await msg.answer_sticker(sticker='CAACAgIAAxkBAAMZZCqHXXVGPzg4eHzg__GbcJ8OkzYAAvwdAAJ9b4BKNkCjrR9OPS4vBA')
        if task_photo_id:
            await msg.answer_photo(photo=task_photo_id,
                                   caption=answer, parse_mode='HTML',
                                   reply_markup=make_complete_task_reply_markup(msg.from_user.id))
        else:
            await msg.answer(text=answer, parse_mode='HTML',
                             reply_markup=make_complete_task_reply_markup(msg.from_user.id))
    else:
        answer = ('üéØ –£ —Ç–µ–±—è –µ—â—ë –Ω–µ –±—ã–ª–æ '
                  '–∑–∞–¥–∞—á.\n\n'
                  '*/task* - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
        await msg.answer_sticker(sticker='CAACAgIAAxkBAAPZZCqSFyGl0u-fVKfTdusdxYJXSkwAAk4eAAJDXYFKd2hQtAuylkMvBA')
        await msg.answer(text=answer, parse_mode='markdown')

    await delete_last_messages(msg)


async def view_task_cmd_handler(msg: Message):
    task_id = int(msg.text.split('/task', maxsplit=1)[1])
    task_description, task_photo_id = execute(
        ('SELECT description, photo_id FROM tasks '
         'WHERE user_id=%s AND id=%s;') %
        (msg.from_user.id, task_id),
        fetchone=True, commit=False
    )
    if task_description:
        answer = ('üéØ –ó–∞–¥–∞—á–∞\n\n'
                  'üí¨ %s') % task_description

        await msg.answer_sticker(sticker='CAACAgIAAxkBAAMZZCqHXXVGPzg4eHzg__GbcJ8OkzYAAvwdAAJ9b4BKNkCjrR9OPS4vBA')
        if task_photo_id:
            try:
                await msg.answer_photo(photo=task_photo_id,
                                       caption=answer, parse_mode='HTML',
                                       reply_markup=make_complete_task_reply_markup(msg.from_user.id))
            except aiogram.utils.exceptions.BadRequest:
                await msg.answer(text=answer + '\n\n‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ', parse_mode='HTML',
                                 reply_markup=make_complete_task_reply_markup(msg.from_user.id))
        else:
            await msg.answer(text=answer, parse_mode='HTML',
                             reply_markup=make_complete_task_reply_markup(msg.from_user.id))
    else:
        answer = ('üéØ –ó–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n'
                  '*/task* - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
        await msg.answer_sticker(sticker='CAACAgIAAxkBAAPZZCqSFyGl0u-fVKfTdusdxYJXSkwAAk4eAAJDXYFKd2hQtAuylkMvBA')
        await msg.answer(text=answer, parse_mode='markdown')

    await delete_last_messages(msg)

async def tasks_cmd_handler(msg: Message):
    tasks = execute(
        ('SELECT id, description, photo_id '
         'FROM tasks '
         'WHERE user_id=%s AND completed=0') % msg.from_user.id,
        fetchall=True
    )
    if tasks:
        answer = 'üìä –í–æ—Ç —Ç–≤–æ–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n'
        for task in tasks:
            photo = '\n‚îú üñº *–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ*' if task[2] else ''
            answer += ('üéØ *%s* %s\n'
                       '‚îî üë®‚Äçüíª /task%s - —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–µ–π\n\n') % \
                      (task[1], photo, task[0])
    else:
        answer = ('üéØ –£ —Ç–µ–±—è –µ—â—ë –Ω–µ –±—ã–ª–æ '
                  '–∑–∞–¥–∞—á.\n\n'
                  '*/task* - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
    await msg.answer_sticker(sticker='CAACAgIAAxkBAAPaZCqSNnyA798hs29WSek7vnUbp4AAAtMeAAKO4IFKD58PHMtIpDwvBA')
    await msg.answer(text=answer, parse_mode='markdown')
    await delete_last_messages(msg)


async def get_sticker_id_handler(msg: Message):
    await msg.answer_sticker(sticker=msg.sticker.file_id)
    print(msg.sticker.file_id)
